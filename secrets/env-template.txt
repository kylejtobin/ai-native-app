# =============================================================================
# Environment Configuration Template
# =============================================================================
# This template is the SOURCE OF TRUTH for all environment configuration
#
# How it works:
#   1. This file is checked into git (secrets/env-template.txt)
#   2. infra/generate-config.sh reads this template
#   3. Script populates secrets and generates .env (git-ignored)
#   4. Never edit .env directly - always edit this template and regenerate
#
# Sections:
#   1. User API Keys     → You provide (via secrets/api/* files or here)
#   2. Auto-Generated    → Script creates random passwords (cached)
#   3. Derived Values    → Script computes from other values
#   4. Static Config     → Rarely changes (hosts, ports, defaults)
#
# Usage:
#   make config          # Generate .env from this template
#   make dev             # Automatically runs `make config` first

# =============================================================================
# 1. USER API KEYS - External Service Credentials
# =============================================================================
# How to provide your API keys:
#   1. Create a file in secrets/api/ named after the service (lowercase)
#   2. Put ONLY the API key in the file (no quotes, no key name)
#   3. Script auto-detects and loads it
#
# Example:
#   $ echo "sk-ant-..." > secrets/api/anthropic
#   $ echo "sk-..." > secrets/api/openai
#   $ make config
#   ✓ ANTHROPIC_API_KEY from secrets/api/anthropic
#   ✓ OPENAI_API_KEY from secrets/api/openai
#
# Convention: secrets/api/<service> → <SERVICE>_API_KEY
#   secrets/api/anthropic → ANTHROPIC_API_KEY
#   secrets/api/openai    → OPENAI_API_KEY
#   secrets/api/tavily    → TAVILY_API_KEY
#
# NEVER edit this template file with real API keys!
# This file is checked into git. Use secrets/api/* (which is git-ignored).
#
# Why "NEED-API-KEY" sentinel?
#   - Makes missing keys obvious (app will fail fast with clear error)
#   - Better than empty string (which might be silently ignored)

# LLM Provider API Keys
OPENAI_API_KEY=NEED-API-KEY       # OpenAI GPT models (gpt-4, gpt-4o, etc.)
ANTHROPIC_API_KEY=NEED-API-KEY    # Claude models (opus, sonnet, haiku)
GROQ_API_KEY=NEED-API-KEY         # Groq (fast inference, llama/mixtral)
TOGETHER_API_KEY=NEED-API-KEY     # Together AI (open models, fine-tuning)
TAVILY_API_KEY=NEED-API-KEY       # Tavily search API (web search tool)

# Ollama Model Pull List
# Models to download when you run: make ollama-setup
# Format: comma-separated list of model:tag
# Example: llama3.2:1b,mistral:latest,codellama:7b
OLLAMA_PULL_MODELS=llama3.2:1b,nomic-embed-text

# =============================================================================
# 2. AUTO-GENERATED SECRETS - Infrastructure Passwords
# =============================================================================
# Leave these BLANK - infra/generate-config.sh will populate them
# 
# How it works:
#   - First run: Script generates random 32-char alphanumeric strings
#   - Cached in: secrets/infra/<service>-password files
#   - Subsequent runs: Script reads from cache (stable across rebuilds)
#
# Why cache?
#   - Database passwords shouldn't change between `make dev` runs
#   - Prevents data loss (PostgreSQL won't start with wrong password)
#   - Explicit `make clean` required to regenerate

DATABASE_PASSWORD=      # PostgreSQL appuser password
REDIS_PASSWORD=         # Redis authentication password
NEO4J_PASSWORD=         # Neo4j database password
MINIO_ACCESS_KEY=       # MinIO root access key
MINIO_SECRET_KEY=       # MinIO root secret key

# =============================================================================
# 3. DERIVED VALUES - Computed Connection Strings
# =============================================================================
# Leave these BLANK - script computes from other values
#
# Why derive?
#   - Single source of truth (password + host + port → URL)
#   - No chance of password mismatch
#   - Easy to update (change password once, URL updates automatically)

DATABASE_URL=           # postgresql+asyncpg://appuser:${PASSWORD}@postgres:5432/appdb
REDIS_URL=              # redis://:${PASSWORD}@redis:6379

# =============================================================================
# 4. STATIC CONFIGURATION - Defaults and Service Locations
# =============================================================================
# These rarely change - only modify if you're customizing the stack

# -----------------------------------------------------------------------------
# Database Configuration (PostgreSQL)
# -----------------------------------------------------------------------------
DATABASE_HOST=postgres              # Docker service name from docker-compose.yml
DATABASE_PORT=5432                  # Standard PostgreSQL port
DATABASE_NAME=appdb                 # Database name (created by init-db.sql)
DATABASE_USER=appuser               # Application user (not postgres superuser)

# -----------------------------------------------------------------------------
# Redis Configuration (Cache & Queues)
# -----------------------------------------------------------------------------
REDIS_HOST=redis                    # Docker service name
REDIS_PORT=6379                     # Standard Redis port

# -----------------------------------------------------------------------------
# Neo4j Configuration (Graph Database)
# -----------------------------------------------------------------------------
NEO4J_URI=bolt://neo4j:7687         # Bolt protocol (binary, fast)
NEO4J_USER=neo4j                    # Default Neo4j username

# -----------------------------------------------------------------------------
# Qdrant Configuration (Vector Database)
# -----------------------------------------------------------------------------
QDRANT_URL=http://qdrant:6333       # REST API endpoint
QDRANT_COLLECTION=documents         # Default collection name

# -----------------------------------------------------------------------------
# Ollama Configuration (Local LLM)
# -----------------------------------------------------------------------------
OLLAMA_BASE_URL=http://ollama:11434 # OpenAI-compatible API endpoint
OLLAMA_MODEL=granite3.3:2b          # Default model for inference
OLLAMA_EMBEDDING_MODEL=nomic-embed-text  # Model for embeddings
OLLAMA_TIMEOUT=300                  # Request timeout (seconds)

# -----------------------------------------------------------------------------
# MinIO Configuration (Object Storage)
# -----------------------------------------------------------------------------
MINIO_ENDPOINT=minio:9000           # S3 API endpoint
MINIO_SECURE=false                  # HTTP (not HTTPS) for local development
MINIO_BUCKET_NAME=app-documents     # Default bucket (more created by setup-minio.sh)

# -----------------------------------------------------------------------------
# FastAPI Configuration (Application Server)
# -----------------------------------------------------------------------------
API_HOST=0.0.0.0                    # Listen on all interfaces
API_PORT=8000                       # HTTP port
API_RELOAD=true                     # Hot reload on code changes (dev mode)
API_WORKERS=1                       # Single worker for development
ENVIRONMENT=development             # Environment name (development|staging|production)
LOG_LEVEL=INFO                      # Logging verbosity (DEBUG|INFO|WARNING|ERROR)
LOG_FORMAT=json                     # Log format (json|text)

# -----------------------------------------------------------------------------
# Application Metadata
# -----------------------------------------------------------------------------
APP_NAME=ai-native-app
APP_VERSION=0.1.0
APP_DESCRIPTION="AI-native Python application architecture"

# -----------------------------------------------------------------------------
# CORS Settings (Cross-Origin Resource Sharing)
# -----------------------------------------------------------------------------
# Allows frontend apps to call your API from different origins
CORS_ORIGINS=http://localhost:3000,http://localhost:8000  # Comma-separated
CORS_CREDENTIALS=true               # Allow cookies/auth headers
CORS_METHODS=*                      # Allow all HTTP methods
CORS_HEADERS=*                      # Allow all headers

# -----------------------------------------------------------------------------
# Rate Limiting (Anti-Abuse)
# -----------------------------------------------------------------------------
RATE_LIMIT_ENABLED=false            # Disabled for development
RATE_LIMIT_REQUESTS=100             # Requests per window
RATE_LIMIT_WINDOW=60                # Window size (seconds)

# -----------------------------------------------------------------------------
# Database Connection Pool Settings
# -----------------------------------------------------------------------------
# Controls how many concurrent database connections your app maintains
DB_POOL_SIZE=5                      # Persistent connections
DB_MAX_OVERFLOW=10                  # Additional connections under load
DB_POOL_TIMEOUT=30                  # Seconds to wait for connection
DB_ECHO=false                       # Log all SQL queries (set true for debugging)

# -----------------------------------------------------------------------------
# Redis Cache Settings
# -----------------------------------------------------------------------------
CACHE_TTL=300                       # Default TTL (seconds) for cached values
CACHE_PREFIX=app:                   # Key prefix to namespace your cache